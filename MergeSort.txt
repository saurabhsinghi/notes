 public static List<Integer> mergeSort(final List<Integer> values){
   if(values.size()<2) return values;
   final List<Integer> left = values.subList(0, values.size()/2);
   final List<Integer> right = values.subList(values.size()/2, values.size());
   return merge(mergeSort(left), mergeSort(right));
 }
 
 public void merge(List<Integer> left, List<Integer> right) {
        List<Integer> merged = new ArrayList<Integer>(left.size()+right.size());
        int lPtr, rPtr;
        while(lPtr<left.size() && rPtr<right.size()){
            if(left.get(lPtr)<right.get(rPtr)){
                merged.add(left.get(lPtr));
                lPtr++;
            }
            else{
                rPtr++;
                merged.add(right.get(rPtr));
            }
        }
        while(lPtr<left.size()){
            merged.add(left.get(lPtr));
            lPtr++;
        }
        while(rPtr<right.size()){
             merged.add(right.get(rPtr));
            rPtr++;
        }
        return merged;
    }
