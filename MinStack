/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
*/

class MinStack {
    class StackNode{
        int val;
        int minVal;
        StackNode next;
        StackNode(int v, int minVal, StackNode next){
            this.val = v;
            this.minVal=minVal;
            this.next = next;
        }
    }
    
    StackNode top;
    
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
      if(top==null){
          top = new StackNode(x,x,null);
      }  
       else{
           StackNode newNode = new StackNode(x, Math.min(x,top.minVal), top);
           top = newNode;
       } 
    }
    
    public void pop() {
        if(top!=null){
            top = top.next;  
        }   
    }
    
    public int top() {
      if(top!=null) 
        return top.val;   
      return 0;
    }
    
    public int getMin() {
       if(top!=null)  
        return top.minVal;  
       return 0; 
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
